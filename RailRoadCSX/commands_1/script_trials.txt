z_vobadm@lnx20629: $ for each_vob in `ct desc vob:/vob/csx_pvob4 | grep "AdminVOB <-" | cut -c26-' ;
> do
> temp=_int
> sn1=`ct lsproj -invob vob:/vob/csx_pvob4`
> sn2= echo $sn1 | grep "^$each_vob"
> sn3= echo $sn2 | cut -d' ' -f3
> stream_name=$sn3$temp
> echo $stream_name
> done
> done


z_vobadm@lnx20629: $ for each in `ct desc vob:/vob/csx_pvob4 | grep "AdminVOB <-" | cut -c26-` ;
> do
> echo $each
> echo `ct lsproj -invob vob:/vob/csx_pvob4 | grep rqs | cut -d' ' -f3`_int
> done


z_vobadm@lnx20629: $ for each in `ct desc vob:/vob/csx_pvob4 | grep "AdminVOB <-" | cut -c26-` ;
> do
> echo $each
> echo `ct lsproj -invob vob:/vob/csx_pvob4 | grep "$each"01 | cut -d' ' -f3`_int
> done


for each in `ct desc vob:/vob/csx_pvob4 | grep "AdminVOB <-" | cut -c26-` ;
do
s1=echo `ct lsproj -invob vob:/vob/csx_pvob4 | grep "$each"01 | cut -d' ' -f3`_int
s2=echo $each
s3=csx_pvob4
echo $s1 $s2 $s3 >> /home/t8054/Arunabh_sandbox/input_file.txt
done



for each in `ct desc vob:/vob/csx_pvob4 | grep "AdminVOB <-" | cut -c26-` ;
do
echo $each `ct lsproj -invob vob:/vob/csx_pvob4 | grep "$each"01 | cut -d' ' -f3`_int  csx_pvob4 >> /home/t8054/Arunabh_sandbox/input_file2.txt
done


for each in `ct desc vob:/vob/csx_pvob4 | grep "AdminVOB <-" | cut -c26-` ;
do
if [$each ne ""]
then
echo `ct lsproj -invob vob:/vob/csx_pvob4 | grep "$each"01 | cut -d' ' -f3`_int  csx_pvob4  $each >> /home/t8054/Arunabh_sandbox/input_file.txt
fi
done




for eachvob in `ct desc vob:/vob/csx_pvob4 | grep "AdminVOB <-" | cut -c26-` ;
do
ucmproj=`ct lsproj -invob vob:/vob/csx_pvob4 | grep "$eachvob"01 | cut -d' ' -f3`
if [ ! -z "$ucmproj" ]; then
echo $ucmproj"_int" csx_pvob4 $eachvob
fi
done


checks if the variable var is not (!) empty [ ! -z "$var" ]
checks if the variable var is empty [ -z "$var" ]


if [ $int1 = $int2 ]
then
       echo "int1 is equal to int2"
elif [ $int1 > $int2 ]
then
       echo "int1 is greater than int2"
else
     echo "int1 is smaller than int2"
fi



outermost loop for PVOBs:

for eachucmvob in `ct lsvob | grep ucmvob | awk '{print $2}' | cut -c6-' ;
do

for eachvob in `ct desc vob:/vob/"$eachucmvob" | grep "AdminVOB <-" | cut -c26-` ;
do
ucmproj=`ct lsproj -invob vob:/vob/"$eachucmvob" | grep "$eachvob"01 | cut -d' ' -f3`
if [ ! -z "$ucmproj" ]; then
echo $ucmproj"_int" $eachucmvob $eachvob >> /home/t8054/Arunabh_sandbox/all_CC_streams.txt
fi
done

done


Better command for listing integration streams in csx_shipcsx:

prints all integration streams:
ct lsstream -invob vob:/vob/csx_shipcsx | grep "01_int" | awk '{print $2}'

prints all vobs by trimming integration stream from both ends (trimming first 3 "sx_" and last 6 "01_int"):
ct lsstream -invob vob:/vob/csx_shipcsx | grep "01_int" | awk '{print $2}' | cut -c4- | rev | cut -c 7- | rev

for cutting 6 chars starting from the end of line: | rev | cut -c 7- | rev



#########################################  Lists stream name, vobnames and pvob-name by PVOB ##################################################
####################################################################################################################


for stream in `ct lsstream -invob vob:/vob/csx_transapps | grep "01_int" | awk '{print $2}'` ;
do
vobname="`echo "$stream" | cut -c4- | rev | cut -c 7- | rev`"
echo $stream $vobname csx_transapps
done



#########################################  Lists vobnames by PVOB ##################################################
####################################################################################################################



List all PVOBs (total=37):
cleartool lsvob | grep "ucmvob" | awk '{print $2}' | cut -c 6- 


for file in `find . -type f` ;
do
lines='cat "$file" | wc -l`
echo $file "******* HAS " $lines " *** OF CODE IN IT"
done

gloc=0
for file in `find . -type f` ;
do
loc=`cat "$file" | wc -l`
echo LINES OF CODE = "$loc"
gloc=gloc+"$loc"
done
echo "Total lines of code is " $gloc



**************************************************************************************************************

Utility for removing additinal clearcase groups for vobs:

fix_prot utility: (to be used from vob server lnx20628)
It is available under:  /opt/local/software/rational/RationalSDLC/clearcase/linux_x86/etc/utils

3. Run the fix_prot utility as follows:


fix_prot -r -root -chown <new_owner> -chgrp <new_primary_group> <path to VOB storage directory> 

fix_prot will remove all additional groups from the VOBs group list. 
 If there were additional groups in the VOBs group list, add those groups back by running protectvob (see step 5 below).


4. Restart the ClearCase services from the ClearCase applet in the control panel.


5. Add the additional groups back to the VOBs group list by running protectvob:


cleartool protectvob -add_group <groupname, groupname2, ...> <vob-storage-pname>


**************************************************************************************************************

dtlfuel
owner csxt.ad.csx.com/z_vobadm
group csxt.ad.csx.com/mobiler

only additonal group = clearcas


To list all additional groups of a VOB: (example dtlfuel)
ct desc vob:/vob/dtlfuel | grep "group csxt.ad.csx.com" | tail -n +2 | cut -c27-

###### execute for loop while in this directory on lnx20628 (vobserver) as root user: ######################################
###### /opt/local/software/rational/RationalSDLC/clearcase/bin #############################################################


for each in `./cleartool desc vob:/vob/clp | grep "group csxt.ad.csx.com" | tail -n +2 | cut -c27- | grep -v clearcas` ;
do
./cleartool protectvob -f -delete_group $each /opt/local/software/clearcode/vobs/smapps013/clp.vbs
done


###### execute for loop while in this directory on lnx20628 (vobserver) as root user: ######################################
###### /opt/local/software/rational/RationalSDLC/clearcase/bin #############################################################



for each in `./cleartool desc vob:/vob/coal | grep "group csxt.ad.csx.com" | tail -n +2 | cut -c27- | grep -v clearcas` ;
do
./cleartool protectvob -f -delete_group $each /opt/local/software/clearcode/vobs/smapps012/coal.vbs
done


#############################################################################################################################

Lists vob storage path:

ct desc vob:/vob/prismdashboard | grep "VOB storage global pathname" | awk '{print $5}' | cut -c2- | rev | cut -c 2- | rev


#############################################################################################################################

Counting number of change-set elements:

cleartool desc -l activity:CSX00160771@/vob/csx_pvob3 | head -n -2 | tail -n +9 | wc -l
cleartool desc -l activity:CSX00167465@/vob/csx_pvob3 | head -n -2 | tail -n +9 | wc -l
cleartool desc -l activity:CSX00171251@/vob/csx_pvob3 | head -n -2 | tail -n +9 | wc -l
cleartool desc -l activity:CSX00164282@/vob/csx_pvob3 | head -n -2 | tail -n +9 | wc -l


#############################################################################################################################


################################# Run protectvob for each vob in a given PVOB ###############################################
#############################################################################################################################


for stream in `./cleartool lsstream -invob vob:/vob/csx_mechanical | grep "01_int" | awk '{print $2}'` ;
do

vobname="`echo "$stream" | cut -c4- | rev | cut -c 7- | rev`"
vobpath=`./cleartool desc vob:/vob/"$vobname" | grep "VOB storage global pathname" | awk '{print $5}' | cut -c2- | rev | cut -c 2- | rev`

echo "PROCESSING THE VOB " $vobname " NOW"
echo "THE VOBPATH is:  " $vobpath

 for addlgroup in `./cleartool desc vob:/vob/"$vobname" | grep "group csxt.ad.csx.com" | tail -n +2 | cut -c27- | grep -v clearcas` ;
  do
   ./cleartool protectvob -f -delete_group "$addlgroup" "$vobpath"
  done

echo "DONE PROCESSING THE VOB " $vobname

echo "##############################################################################################"
echo "##############################################################################################"
echo "##############################################################################################"
echo "                                                                                              "
echo "                                                                                              "

done

ct 
################################# Run protectvob for each vob in a given PVOB ###############################################
#############################################################################################################################


cleartool lscomp -invob vob:/vob/csx_mechanical | awk '{print $2}' | grep -v "directory:"
